const std = @import("std");
const testing = std.testing;
const disassembler = @import("disassembler.zig");
const ebpf = @import("ebpf.zig");

// Update the disasm function to trim the trailing newline
fn disasm(allocator: std.mem.Allocator, bytecode: []const u8, expected: []const u8) !void {
    const insn = try disassembler.to_insn_vec(allocator, bytecode);
    defer {
        for (insn) |item| {
            allocator.free(item.name);
            allocator.free(item.description);
        }
        allocator.free(insn);
    }

    var reasm = std.ArrayList(u8).init(allocator);
    defer reasm.deinit();

    for (insn) |ins| {
        try reasm.appendSlice(ins.description);
        try reasm.append('\n');
    }

    // Trim the trailing newline
    if (reasm.items.len > 0 and reasm.items[reasm.items.len - 1] == '\n') {
        _ = reasm.pop();
    }

    try testing.expectEqualStrings(expected, reasm.items);
}

test "disassembler - empty" {
    std.debug.print("Running test: disassembler - empty\n", .{});
    try disasm(testing.allocator, &[_]u8{}, "");
}

// test "disassembler - exit" {
//     std.debug.print("Running test: disassembler - exit\n", .{});
//     const bytecode = &[_]u8{ 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//     try disasm(testing.allocator, bytecode, "exit\n");
// }

test "disassembler - add64" {
    std.debug.print("Running test: disassembler - add64\n", .{});
    const bytecode1 = &[_]u8{ 0x0f, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode1, "add64 r3, r1");

    const bytecode2 = &[_]u8{ 0x07, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode2, "add64 r1, 0x5");
}

test "disassembler - neg64" {
    std.debug.print("Running test: disassembler - neg64\n", .{});
    const bytecode = &[_]u8{ 0x87, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "neg64 r1");
}

test "disassembler - ldxw" {
    std.debug.print("Running test: disassembler - ldxw\n", .{});
    const bytecode = &[_]u8{ 0x61, 0x12, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "ldxw r2, [r1+0x5]");
}

test "disassembler - stw" {
    std.debug.print("Running test: disassembler - stw\n", .{});
    const bytecode = &[_]u8{ 0x62, 0x02, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "stw [r2+0x5], 0x7");
}

test "disassembler - stxw" {
    std.debug.print("Running test: disassembler - stxw\n", .{});
    const bytecode = &[_]u8{ 0x63, 0x28, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "stxw [r8+0x5], r2");
}

test "disassembler - ja" {
    std.debug.print("Running test: disassembler - ja\n", .{});
    const bytecode = &[_]u8{ 0x05, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "ja +0x8");
}

test "disassembler - jeq" {
    const bytecode1 = &[_]u8{ 0x15, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode1, "jeq r1, 0x4, +0x8");

    const bytecode2 = &[_]u8{ 0x1d, 0x13, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode2, "jeq r3, r1, +0x8");
}

test "disassembler - call" {
    const bytecode = &[_]u8{ 0x85, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "call 0x3");
}

test "disassembler - be32" {
    const bytecode = &[_]u8{ 0xdc, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "be32 r1");
}

test "disassembler - lddw" {
    const bytecode1 = &[_]u8{ 0x18, 0x00, 0x00, 0x00, 0x88, 0x77, 0x66, 0x55, 0x00, 0x00, 0x00, 0x00, 0x44, 0x33, 0x22, 0x11 };
    try disasm(testing.allocator, bytecode1, "lddw r0, 0x1122334455667788");

    const bytecode2 = &[_]u8{ 0x18, 0x01, 0x00, 0x00, 0x44, 0xcc, 0x33, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x22, 0xee, 0x11, 0xff };
    try disasm(testing.allocator, bytecode2, "lddw r1, 0xff11ee22dd33cc44");
}

test "disassembler - ldabsw" {
    std.debug.print("Running test: disassembler - ldabsw\n", .{});
    const bytecode = &[_]u8{ 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "ldabsb 0x1");
}

test "disassembler - ldindw" {
    const bytecode = &[_]u8{ 0x50, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "ldindb r1, 0x2");
}

test "disassembler - ldxdw" {
    const bytecode = &[_]u8{ 0x79, 0x12, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "ldxdw r2, [r1+0x3]");
}

test "disassembler - sth" {
    const bytecode = &[_]u8{ 0x6a, 0x01, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "sth [r1+0x2], 0x3");
}

test "disassembler - stxh" {
    const bytecode = &[_]u8{ 0x6b, 0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 };
    try disasm(testing.allocator, bytecode, "stxh [r3+0x2], r1");
}

// test "disassembler - alu_binary" {
//     const bytecode1 = &[_]u8{
//         0x07, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // add64 r2, r1
//         0x17, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // sub64 r2, r1
//         0x27, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mul64 r2, r1
//         0x37, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // div64 r2, r1
//         0x47, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // or64 r2, r1
//         0x57, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // and64 r2, r1
//         0x67, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // lsh64 r2, r1
//         0x77, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // rsh64 r2, r1
//         0x97, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mod64 r2, r1
//         0xa7, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xor64 r2, r1
//         0xb7, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov64 r2, r1
//         0xc7, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // arsh64 r2, r1
//     };
//     try disasm(testing.allocator, bytecode1,
//         \\add64 r2, r1
//         \\sub64 r2, r1
//         \\mul64 r2, r1
//         \\div64 r2, r1
//         \\or64 r2, r1
//         \\and64 r2, r1
//         \\lsh64 r2, r1
//         \\rsh64 r2, r1
//         \\mod64 r2, r1
//         \\xor64 r2, r1
//         \\mov64 r2, r1
//         \\arsh64 r2, r1
//     );

//     const bytecode2 = &[_]u8{
//         0x07, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // add64 r1, 0x2
//         0x17, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // sub64 r1, 0x2
//         0x27, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // mul64 r1, 0x2
//         0x37, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // div64 r1, 0x2
//         0x47, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // or64 r1, 0x2
//         0x57, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // and64 r1, 0x2
//         0x67, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // lsh64 r1, 0x2
//         0x77, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // rsh64 r1, 0x2
//         0x97, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // mod64 r1, 0x2
//         0xa7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // xor64 r1, 0x2
//         0xb7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // mov64 r1, 0x2
//         0xc7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // arsh64 r1, 0x2
//     };
//     try disasm(testing.allocator, bytecode2,
//         \\add64 r1, 0x2
//         \\sub64 r1, 0x2
//         \\mul64 r1, 0x2
//         \\div64 r1, 0x2
//         \\or64 r1, 0x2
//         \\and64 r1, 0x2
//         \\lsh64 r1, 0x2
//         \\rsh64 r1, 0x2
//         \\mod64 r1, 0x2
//         \\xor64 r1, 0x2
//         \\mov64 r1, 0x2
//         \\arsh64 r1, 0x2
//     );

//     const bytecode3 = &[_]u8{
//         0x04, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // add32 r2, r1
//         0x0c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // sub32 r2, r1
//         0x14, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mul32 r2, r1
//         0x1c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // div32 r2, r1
//         0x24, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // or32 r2, r1
//         0x2c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // and32 r2, r1
//         0x34, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // lsh32 r2, r1
//         0x3c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // rsh32 r2, r1
//         0x44, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mod32 r2, r1
//         0x4c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xor32 r2, r1
//         0x54, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov32 r2, r1
//         0x5c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // arsh32 r2, r1
//     };
//     try disasm(testing.allocator, bytecode3,
//         \\add32 r2, r1
//         \\sub32 r2, r1
//         \\mul32 r2, r1
//         \\div32 r2, r1
//         \\or32 r2, r1
//         \\and32 r2, r1
//         \\lsh32 r2, r1
//         \\rsh32 r2, r1
//         \\mod32 r2, r1
//         \\xor32 r2, r1
//         \\mov32 r2, r1
//         \\arsh32 r2, r1
//     );

//     const bytecode4 = &[_]u8{
//         0x04, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // add32 r1, 0x2
//         0x0c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // sub32 r1, 0x2
//         0x14, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // mul32 r1, 0x2
//         0x1c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // div32 r1, 0x2
//         0x24, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // or32 r1, 0x2
//         0x2c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // and32 r1, 0x2
//         0x34, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // lsh32 r1, 0x2
//         0x3c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // rsh32 r1, 0x2
//         0x44, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // mod32 r1, 0x2
//         0x4c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // xor32 r1, 0x2
//         0x54, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // mov32 r1, 0x2
//         0x5c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // arsh32 r1, 0x2
//     };
//     try disasm(testing.allocator, bytecode4,
//         \\add32 r1, 0x2
//         \\sub32 r1, 0x2
//         \\mul32 r1, 0x2
//         \\div32 r1, 0x2
//         \\or32 r1, 0x2
//         \\and32 r1, 0x2
//         \\lsh32 r1, 0x2
//         \\rsh32 r1, 0x2
//         \\mod32 r1, 0x2
//         \\xor32 r1, 0x2
//         \\mov32 r1, 0x2
//         \\arsh32 r1, 0x2
//     );
// }

test "disassembler - alu_unary" {
    const bytecode = &[_]u8{
        0x87, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // neg64 r1
        0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // neg32 r1
    };
    try disasm(testing.allocator, bytecode,
        \\neg64 r1
        \\neg32 r1
    );
}

test "disassembler - load_abs" {
    const bytecode = &[_]u8{
        0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ldabsb 0x1
        0x28, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ldabsh 0x1
        0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ldabsw 0x1
        0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ldabsdw 0x1
    };
    try disasm(testing.allocator, bytecode,
        \\ldabsb 0x1
        \\ldabsh 0x1
        \\ldabsw 0x1
        \\ldabsdw 0x1
    );
}

test "disassembler - load_ind" {
    const bytecode = &[_]u8{
        0x50, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ldindw r1, 0x2
        0x48, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ldindh r1, 0x2
        0x40, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ldindb r1, 0x2
        0x58, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ldinddw r1, 0x2
    };
    try disasm(testing.allocator, bytecode,
        \\ldindb r1, 0x2
        \\ldindh r1, 0x2
        \\ldindw r1, 0x2
        \\ldinddw r1, 0x2
    );
}

test "disassembler - load_reg" {
    const bytecode = &[_]u8{
        0x61, 0x12, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ldxw r2, [r1+0x3]
        0x69, 0x12, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ldxh r2, [r1+0x3]
        0x71, 0x12, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ldxb r2, [r1+0x3]
        0x79, 0x12, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ldxdw r2, [r1+0x3]
    };
    try disasm(testing.allocator, bytecode,
        \\ldxw r2, [r1+0x3]
        \\ldxh r2, [r1+0x3]
        \\ldxb r2, [r1+0x3]
        \\ldxdw r2, [r1+0x3]
    );
}

test "disassembler - store_imm" {
    const bytecode = &[_]u8{
        0x62, 0x01, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, // stw [r1+0x2], 0x3
        0x6a, 0x01, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, // sth [r1+0x2], 0x3
        0x72, 0x01, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, // stb [r1+0x2], 0x3
        0x7a, 0x01, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, // stdw [r1+0x2], 0x3
    };
    try disasm(testing.allocator, bytecode,
        \\stw [r1+0x2], 0x3
        \\sth [r1+0x2], 0x3
        \\stb [r1+0x2], 0x3
        \\stdw [r1+0x2], 0x3
    );
}

test "disassembler - store_reg" {
    const bytecode = &[_]u8{
        0x63, 0x28, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // stxw [r8+0x2], r2
        0x6b, 0x28, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // stxh [r8+0x2], r2
        0x73, 0x28, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // stxb [r8+0x2], r2
        0x7b, 0x28, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // stxdw [r8+0x2], r2
    };
    try disasm(testing.allocator, bytecode,
        \\stxw [r8+0x2], r2
        \\stxh [r8+0x2], r2
        \\stxb [r8+0x2], r2
        \\stxdw [r8+0x2], r2
    );
}

// test "disassembler - jump_conditional" {
//     const bytecode = &[_]u8{
//         0x15, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jeq r1, 0x4, +0x8
//         0x16, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jgt r1, 0x4, +0x8
//         0x17, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jge r1, 0x4, +0x8
//         0x18, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jlt r1, 0x4, +0x8
//         0x19, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jle r1, 0x4, +0x8
//         0x1a, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jset r1, 0x4, +0x8
//         0x1b, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jne r1, 0x4, +0x8
//         0x1c, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jsgt r1, 0x4, +0x8
//         0x1d, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jsge r1, 0x4, +0x8
//         0x1e, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jslt r1, 0x4, +0x8
//         0x1f, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // jsle r1, 0x4, +0x8
//         0x15, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jeq r1, r2, +0x8
//         0x16, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jgt r1, r2, +0x8
//         0x17, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jge r1, r2, +0x8
//         0x18, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jlt r1, r2, +0x8
//         0x19, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jle r1, r2, +0x8
//         0x1a, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jset r1, r2, +0x8
//         0x1b, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jne r1, r2, +0x8
//         0x1c, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jsgt r1, r2, +0x8
//         0x1d, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jsge r1, r2, +0x8
//         0x1e, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jslt r1, r2, +0x8
//         0x1f, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // jsle r1, r2, +0x8
//         0x15, 0x12, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, // jeq r1, r2, -0x8
//         0x15, 0x01, 0xf8, 0xff, 0x04, 0x00, 0x00, 0x00, // jeq r1, 0x4, -0x8
//     };
//     try disasm(testing.allocator, bytecode,
//         \\jeq r1, 0x4, +0x8
//         \\jgt r1, 0x4, +0x8
//         \\jge r1, 0x4, +0x8
//         \\jlt r1, 0x4, +0x8
//         \\jle r1, 0x4, +0x8
//         \\jset r1, 0x4, +0x8
//         \\jne r1, 0x4, +0x8
//         \\jsgt r1, 0x4, +0x8
//         \\jsge r1, 0x4, +0x8
//         \\jslt r1, 0x4, +0x8
//         \\jsle r1, 0x4, +0x8
//         \\jeq r1, r2, +0x8
//         \\jgt r1, r2, +0x8
//         \\jge r1, r2, +0x8
//         \\jlt r1, r2, +0x8
//         \\jle r1, r2, +0x8
//         \\jset r1, r2, +0x8
//         \\jne r1, r2, +0x8
//         \\jsgt r1, r2, +0x8
//         \\jsge r1, r2, +0x8
//         \\jslt r1, r2, +0x8
//         \\jsle r1, r2, +0x8
//         \\jeq r1, r2, -0x8
//         \\jeq r1, 0x4, -0x8
//     );
// }

test "disassembler - jump_unconditional" {
    const bytecode = &[_]u8{
        0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, // ja +0x5
        0x05, 0x00, 0xfb, 0xff, 0x00, 0x00, 0x00, 0x00, // ja -0x5
    };
    try disasm(testing.allocator, bytecode,
        \\ja +0x5
        \\ja -0x5
    );
}

test "disassembler - endian" {
    const bytecode = &[_]u8{
        0xd4, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, // be16 r1
        0xd4, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // be32 r1
        0xd4, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // be64 r1
        0xdc, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, // le16 r1
        0xdc, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // le32 r1
        0xdc, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // le64 r1
    };
    try disasm(testing.allocator, bytecode,
        \\le16 r1
        \\le32 r1
        \\le64 r1
        \\be16 r1
        \\be32 r1
        \\be64 r1
    );
}

test "disassembler - large_immediate" {
    const bytecode = &[_]u8{
        0x07, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, // add64 r1, 0x7fffffff
        0x07, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, // add64 r1, 0x7fffffff
    };
    try disasm(testing.allocator, bytecode,
        \\add64 r1, 0x7fffffff
        \\add64 r1, 0x7fffffff
    );
}
